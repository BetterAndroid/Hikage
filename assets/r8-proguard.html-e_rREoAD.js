import{_ as e,o,c as a,e as s}from"./app-ZnF1aHNS.js";const c={},n=s(`<h1 id="r8-proguard-obfuscation" tabindex="-1"><a class="header-anchor" href="#r8-proguard-obfuscation" aria-hidden="true">#</a> R8 &amp; Proguard Obfuscation</h1><blockquote><p>In most scenarios, app packages can be compressed through obfuscation. Here is an introduction to how to configure obfuscation rules.</p></blockquote><p><code>Hikage</code> does not require additional configuration of obfuscation rules, since <code>View</code> objects loaded by Hikage do not need to be defined in XML, they can be equally obfuscated.</p><p>You can force them to be obfuscated with your custom <code>View</code>, such as <code>com.yourpackage.YourView</code>, using the following rules.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#adbac7;">-allowobfuscation class com.yourpackage.YourView</span></span>
<span class="line"><span style="color:#adbac7;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you must prevent <code>Hikage</code> from being obfuscated or if something occurs after being obfuscated, you can use the following rules to prevent <code>Hikage</code> from being obfuscated.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#adbac7;">-keep class com.highcapable.hikage**</span></span>
<span class="line"><span style="color:#adbac7;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),i=[n];function t(d,r){return o(),a("div",null,i)}const u=e(c,[["render",t],["__file","r8-proguard.html.vue"]]);export{u as default};
